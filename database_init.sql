-- Drop stuff
DROP TABLE IF EXISTS USER_TABLE CASCADE;
DROP TABLE IF EXISTS URGENCY CASCADE;
DROP TABLE IF EXISTS TASK_WORK CASCADE;
DROP TABLE IF EXISTS TASK_PARTICIPANT_GROUP CASCADE;
DROP TABLE IF EXISTS TASK_PARTICIPANT CASCADE;
DROP TABLE IF EXISTS TASK_GROUP CASCADE;
DROP TABLE IF EXISTS TASK CASCADE;
DROP TABLE IF EXISTS OFFER_TASK_USER CASCADE;
DROP TABLE IF EXISTS OFFER_TASK_GROUP CASCADE;
DROP TABLE IF EXISTS OFFER_MEMBERSHIP CASCADE;
DROP TABLE IF EXISTS HIBERNATE_SEQUENCES CASCADE;
DROP TABLE IF EXISTS GROUP_TABLE CASCADE;
DROP TABLE IF EXISTS GROUP_MEMBER CASCADE;
DROP TABLE IF EXISTS ERROR_RESPONSE CASCADE;

DROP SEQUENCE IF EXISTS PUBLIC.SYSTEM_SEQUENCE_TASK_ID;
DROP SEQUENCE IF EXISTS PUBLIC.SYSTEM_SEQUENCE_GROUP_ID;
DROP SEQUENCE IF EXISTS PUBLIC.SYSTEM_SEQUENCE_TASK_WORK_ID;
DROP SEQUENCE IF EXISTS PUBLIC.SYSTEM_SEQUENCE_GROUP_MEMBER_ID;
DROP SEQUENCE IF EXISTS PUBLIC.SYSTEM_SEQUENCE_TASK_PARTICIPANT_ID;
DROP SEQUENCE IF EXISTS PUBLIC.SYSTEM_SEQUENCE_USER_ID;
DROP SEQUENCE IF EXISTS PUBLIC.SYSTEM_SEQUENCE_URGENCY_ID;

CREATE SEQUENCE PUBLIC.SYSTEM_SEQUENCE_TASK_ID
       CACHE 32;


CREATE SEQUENCE PUBLIC.SYSTEM_SEQUENCE_GROUP_ID
       CACHE 32;


CREATE SEQUENCE PUBLIC.SYSTEM_SEQUENCE_TASK_WORK_ID
       CACHE 32;


CREATE SEQUENCE PUBLIC.SYSTEM_SEQUENCE_GROUP_MEMBER_ID
       CACHE 32;


CREATE SEQUENCE PUBLIC.SYSTEM_SEQUENCE_TASK_PARTICIPANT_ID
       CACHE 32;


CREATE SEQUENCE PUBLIC.SYSTEM_SEQUENCE_USER_ID
       CACHE 32;


CREATE SEQUENCE PUBLIC.SYSTEM_SEQUENCE_URGENCY_ID
       CACHE 32;



----------------------------------------------------------------------------------------------------------------------------------------
-- Tables

CREATE TABLE USER_TABLE
(
   USER_ID   BIGINT         DEFAULT (NEXT VALUE FOR PUBLIC.SYSTEM_SEQUENCE_USER_ID) NOT NULL,
   EMAIL     VARCHAR(255),
   NAME      VARCHAR(255),
   PWDHASH   VARCHAR(255)   NOT NULL,
   PWDSALT   VARCHAR(255)   NOT NULL,
   USERNAME  VARCHAR(255)   NOT NULL
);

ALTER TABLE USER_TABLE
   ADD PRIMARY KEY (USER_ID);

ALTER TABLE USER_TABLE
   ADD CONSTRAINT UNIQ_USERNAME UNIQUE (USERNAME);


----------------------------------------------------------------------------------------------------------------------------------------


CREATE TABLE URGENCY
(
   URGENCY_ID   BIGINT      DEFAULT (NEXT VALUE FOR PUBLIC.SYSTEM_SEQUENCE_URGENCY_ID) NOT NULL,
   LAST_UPDATE  TIMESTAMP   NOT NULL,
   VALUE        DOUBLE      NOT NULL
);

ALTER TABLE URGENCY
   ADD PRIMARY KEY (URGENCY_ID);



----------------------------------------------------------------------------------------------------------------------------------------

CREATE TABLE TASK
(
   TASK_TYPE      VARCHAR(31)    NOT NULL,
   TASK_ID        BIGINT         DEFAULT (NEXT VALUE FOR PUBLIC.SYSTEM_SEQUENCE_TASK_ID) NOT NULL,
   DATE_CREATED   TIMESTAMP      NOT NULL,
   DESCRIPTION    VARCHAR(255),
   NAME           VARCHAR(255)   NOT NULL,
   PRIORITY       INTEGER,
   STATUS         VARCHAR(255),
   WORK_ESTIMATE  DOUBLE,
   GROW_SPEED     DOUBLE,
   DATE_DEADLINE  TIMESTAMP,
   URGENCY_ID     BIGINT
);

ALTER TABLE TASK
   ADD PRIMARY KEY (TASK_ID);

ALTER TABLE TASK
  ADD CONSTRAINT FK_TASK_URGENCY FOREIGN KEY (URGENCY_ID)
  REFERENCES URGENCY (URGENCY_ID)
  ON UPDATE RESTRICT
  ON DELETE RESTRICT;

CREATE INDEX FK_TASK_URGENCY_INDEX_2
   ON TASK (URGENCY_ID ASC);


----------------------------------------------------------------------------------------------------------------------------------------

CREATE TABLE OFFER_TASK_USER
(
   OFFER_ID       BIGINT   NOT NULL,
   OFFERER_ID     BIGINT,
   TASK_ID        BIGINT,
   OFFERED_TO_ID  BIGINT
);

ALTER TABLE OFFER_TASK_USER
   ADD PRIMARY KEY (OFFER_ID);

ALTER TABLE OFFER_TASK_USER
  ADD CONSTRAINT FK_OFFER_TASK_USER_TO_TASK FOREIGN KEY (TASK_ID)
  REFERENCES TASK (TASK_ID)
  ON UPDATE RESTRICT
  ON DELETE RESTRICT;

ALTER TABLE OFFER_TASK_USER
  ADD CONSTRAINT FK_OFFER_TASK_USER_TO_USER_OFFERED_TO FOREIGN KEY (OFFERED_TO_ID)
  REFERENCES USER_TABLE (USER_ID)
  ON UPDATE RESTRICT
  ON DELETE RESTRICT;

ALTER TABLE OFFER_TASK_USER
  ADD CONSTRAINT FK_OFFER_TASK_USER_TO_USER_OFFERER FOREIGN KEY (OFFERER_ID)
  REFERENCES USER_TABLE (USER_ID)
  ON UPDATE RESTRICT
  ON DELETE RESTRICT;

CREATE INDEX FK_OFFER_TASK_USER_TO_TASK_INDEX_D
   ON OFFER_TASK_USER (TASK_ID ASC);

CREATE INDEX FK_OFFER_TASK_USER_TO_USER_OFFERED_TO_INDEX_D
   ON OFFER_TASK_USER (OFFERED_TO_ID ASC);

CREATE INDEX FK_OFFER_TASK_USER_TO_USER_OFFERER_INDEX_D
   ON OFFER_TASK_USER (OFFERER_ID ASC);








----------------------------------------------------------------------------------------------------------------------------------------

CREATE TABLE HIBERNATE_SEQUENCES
(
   SEQUENCE_NAME           VARCHAR(255),
   SEQUENCE_NEXT_HI_VALUE  INTEGER
);

----------------------------------------------------------------------------------------------------------------------------------------

CREATE TABLE GROUP_TABLE
(
   GROUP_ID     BIGINT         DEFAULT (NEXT VALUE FOR PUBLIC.SYSTEM_SEQUENCE_GROUP_ID) NOT NULL,
   NAME         VARCHAR(255)   NOT NULL,
   DESCRIPTION  VARCHAR(255)
);

ALTER TABLE GROUP_TABLE
   ADD PRIMARY KEY (GROUP_ID);

ALTER TABLE GROUP_TABLE
   ADD CONSTRAINT UNIQ_GROUP_NAME UNIQUE (NAME);


----------------------------------------------------------------------------------------------------------------------------------------

CREATE TABLE GROUP_MEMBER
(
   GROUP_MEMBER_ID  BIGINT         DEFAULT (NEXT VALUE FOR PUBLIC.SYSTEM_SEQUENCE_GROUP_MEMBER_ID) NOT NULL,
   ROLE             VARCHAR(255),
   GROUP_ID         BIGINT,
   USER_ID          BIGINT
);

ALTER TABLE GROUP_MEMBER
   ADD PRIMARY KEY (GROUP_MEMBER_ID);

ALTER TABLE GROUP_MEMBER
  ADD CONSTRAINT FK_GROUP_MEMBER_TO_GROUP FOREIGN KEY (GROUP_ID)
  REFERENCES GROUP_TABLE (GROUP_ID)
  ON UPDATE RESTRICT
  ON DELETE RESTRICT;

ALTER TABLE GROUP_MEMBER
  ADD CONSTRAINT FK_GROUP_MEMBER_TO_USER FOREIGN KEY (USER_ID)
  REFERENCES USER_TABLE (USER_ID)
  ON UPDATE RESTRICT
  ON DELETE RESTRICT;

CREATE INDEX FK_GROUP_MEMBER_TO_GROUP_INDEX_1
   ON GROUP_MEMBER (GROUP_ID ASC);

CREATE INDEX FK_GROUP_MEMBER_TO_USER_INDEX_1
   ON GROUP_MEMBER (USER_ID ASC);

----------------------------------------------------------------------------------------------------------------------------------------

CREATE TABLE TASK_WORK
(
   TASKWORK_ID     BIGINT   DEFAULT (NEXT VALUE FOR PUBLIC.SYSTEM_SEQUENCE_TASK_WORK_ID) NOT NULL,
   MANHOURS        DOUBLE   NOT NULL,
   OWNING_TASK_ID  BIGINT,
   USER_ID         BIGINT
);

ALTER TABLE TASK_WORK
   ADD PRIMARY KEY (TASKWORK_ID);

ALTER TABLE TASK_WORK
  ADD CONSTRAINT FK_TASK_WORK_TASK FOREIGN KEY (OWNING_TASK_ID)
  REFERENCES TASK (TASK_ID)
  ON UPDATE RESTRICT
  ON DELETE RESTRICT;

ALTER TABLE TASK_WORK
  ADD CONSTRAINT FK_TASK_WORK_USER FOREIGN KEY (USER_ID)
  REFERENCES USER_TABLE (USER_ID)
  ON UPDATE RESTRICT
  ON DELETE RESTRICT;

CREATE INDEX FK_TASK_WORK_TASK_INDEX_B
   ON TASK_WORK (OWNING_TASK_ID ASC);

CREATE INDEX FK_TASK_WORK_USER_INDEX_B
   ON TASK_WORK (USER_ID ASC);

----------------------------------------------------------------------------------------------------------------------------------------

CREATE TABLE TASK_PARTICIPANT
(
   TASKPARTICIPANT_ID  BIGINT         DEFAULT (NEXT VALUE FOR PUBLIC.SYSTEM_SEQUENCE_TASK_PARTICIPANT_ID) NOT NULL,
   ROLE                VARCHAR(255),
   SOLO                BOOLEAN,
   TASK_ID             BIGINT,
   USER_ID             BIGINT
);

ALTER TABLE TASK_PARTICIPANT
   ADD PRIMARY KEY (TASKPARTICIPANT_ID);

ALTER TABLE TASK_PARTICIPANT
  ADD CONSTRAINT FK_TASK_PARTICIPANT_TASK FOREIGN KEY (TASK_ID)
  REFERENCES TASK (TASK_ID)
  ON UPDATE RESTRICT
  ON DELETE RESTRICT;

ALTER TABLE TASK_PARTICIPANT
  ADD CONSTRAINT FK_TASK_PARTICIPANT_USER FOREIGN KEY (USER_ID)
  REFERENCES USER_TABLE (USER_ID)
  ON UPDATE RESTRICT
  ON DELETE RESTRICT;

CREATE INDEX FK_TASK_PARTICIPANT_TASK_INDEX_7
   ON TASK_PARTICIPANT (TASK_ID ASC);

CREATE INDEX FK_TASK_PARTICIPANT_USER_INDEX_7
   ON TASK_PARTICIPANT (USER_ID ASC);


----------------------------------------------------------------------------------------------------------------------------------------

CREATE TABLE TASK_PARTICIPANT_GROUP
(
   TASKPARTICIPANT_ID  BIGINT   NOT NULL,
   GROUP_ID            BIGINT   NOT NULL
);

ALTER TABLE TASK_PARTICIPANT_GROUP
   ADD PRIMARY KEY (TASKPARTICIPANT_ID, GROUP_ID);

ALTER TABLE TASK_PARTICIPANT_GROUP
  ADD CONSTRAINT FK_TASK_PARTICIPANT_GROUP_GROUP FOREIGN KEY (GROUP_ID)
  REFERENCES GROUP_TABLE (GROUP_ID)
  ON UPDATE RESTRICT
  ON DELETE RESTRICT;

ALTER TABLE TASK_PARTICIPANT_GROUP
  ADD CONSTRAINT FK_TASK_PARTICIPANT_GROUP_TASK_PARTICIPANT FOREIGN KEY (TASKPARTICIPANT_ID)
  REFERENCES TASK_PARTICIPANT (TASKPARTICIPANT_ID)
  ON UPDATE RESTRICT
  ON DELETE RESTRICT;

CREATE INDEX FK_TASK_PARTICIPANT_GROUP_GROUP_INDEX_2
   ON TASK_PARTICIPANT_GROUP (GROUP_ID ASC);

----------------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------------


CREATE TABLE TASK_GROUP
(
   TASK_ID   BIGINT   NOT NULL,
   GROUP_ID  BIGINT   NOT NULL
);

ALTER TABLE TASK_GROUP
   ADD PRIMARY KEY (TASK_ID, GROUP_ID);

ALTER TABLE TASK_GROUP
  ADD CONSTRAINT FK_TASK_GROUP_GROUP FOREIGN KEY (GROUP_ID)
  REFERENCES GROUP_TABLE (GROUP_ID)
  ON UPDATE RESTRICT
  ON DELETE RESTRICT;

ALTER TABLE TASK_GROUP
  ADD CONSTRAINT FK_TASK_GROUP_TASK FOREIGN KEY (TASK_ID)
  REFERENCES TASK (TASK_ID)
  ON UPDATE RESTRICT
  ON DELETE RESTRICT;

CREATE INDEX FK_TASK_GROUP_GROUP_INDEX_A
   ON TASK_GROUP (GROUP_ID ASC);

----------------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------------

CREATE TABLE OFFER_TASK_GROUP
(
   OFFER_ID    BIGINT   NOT NULL,
   OFFERER_ID  BIGINT,
   TASK_ID     BIGINT,
   GROUP_ID    BIGINT
);

ALTER TABLE OFFER_TASK_GROUP
   ADD PRIMARY KEY (OFFER_ID);

ALTER TABLE OFFER_TASK_GROUP
  ADD CONSTRAINT FK_OFFER_TASK_GROUP_TO_GROUP FOREIGN KEY (GROUP_ID)
  REFERENCES GROUP_TABLE (GROUP_ID)
  ON UPDATE RESTRICT
  ON DELETE RESTRICT;

ALTER TABLE OFFER_TASK_GROUP
  ADD CONSTRAINT FK_OFFER_TASK_GROUP_TO_TASK FOREIGN KEY (TASK_ID)
  REFERENCES TASK (TASK_ID)
  ON UPDATE RESTRICT
  ON DELETE RESTRICT;

ALTER TABLE OFFER_TASK_GROUP
  ADD CONSTRAINT FK_OFFER_TASK_GROUP_TO_USER FOREIGN KEY (OFFERER_ID)
  REFERENCES USER_TABLE (USER_ID)
  ON UPDATE RESTRICT
  ON DELETE RESTRICT;

CREATE INDEX FK_OFFER_TASK_GROUP_TO_TASK_INDEX_9
   ON OFFER_TASK_GROUP (TASK_ID ASC);

CREATE INDEX FK_OFFER_TASK_GROUP_TO_USER_INDEX_9
   ON OFFER_TASK_GROUP (OFFERER_ID ASC);

CREATE INDEX FK_OFFER_TASK_GROUP_TO_GROUP_INDEX_9
   ON OFFER_TASK_GROUP (GROUP_ID ASC);

----------------------------------------------------------------------------------------------------------------------------------------

CREATE TABLE OFFER_MEMBERSHIP
(
   OFFER_ID    BIGINT   NOT NULL,
   OFFERER_ID  BIGINT,
   GROUP_ID    BIGINT,
   USER_ID     BIGINT
);

ALTER TABLE OFFER_MEMBERSHIP
   ADD PRIMARY KEY (OFFER_ID);

ALTER TABLE OFFER_MEMBERSHIP
  ADD CONSTRAINT FK_OFFER_MEMBERSHIP_TO_GROUP FOREIGN KEY (GROUP_ID)
  REFERENCES GROUP_TABLE (GROUP_ID)
  ON UPDATE RESTRICT
  ON DELETE RESTRICT;

ALTER TABLE OFFER_MEMBERSHIP
  ADD CONSTRAINT FK_OFFER_MEMBERSHIP_TO_USER_OFFERER FOREIGN KEY (OFFERER_ID)
  REFERENCES USER_TABLE (USER_ID)
  ON UPDATE RESTRICT
  ON DELETE RESTRICT;

ALTER TABLE OFFER_MEMBERSHIP
  ADD CONSTRAINT FK_OFFER_MEMBERSHIP_TO_USER_OFFERED_TO FOREIGN KEY (USER_ID)
  REFERENCES USER_TABLE (USER_ID)
  ON UPDATE RESTRICT
  ON DELETE RESTRICT;

CREATE INDEX FK_OFFER_MEMBERSHIP_TO_GROUP_INDEX_B
   ON OFFER_MEMBERSHIP (GROUP_ID ASC);

CREATE INDEX FK_OFFER_MEMBERSHIP_TO_USER_OFFERER_INDEX_B
   ON OFFER_MEMBERSHIP (OFFERER_ID ASC);

CREATE INDEX FK_OFFER_MEMBERSHIP_TO_USER_OFFERED_TO_INDEX_B
   ON OFFER_MEMBERSHIP (USER_ID ASC);





-- FOO table - this is not really used.

CREATE TABLE ERROR_RESPONSE
(
   ID             INTEGER        NOT NULL,
   ERROR_CODE     INTEGER        NOT NULL,
   ERROR_MESSAGE  VARCHAR(255)
);

ALTER TABLE ERROR_RESPONSE
   ADD PRIMARY KEY (ID);
